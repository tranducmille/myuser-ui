/**
 * Spire Facade API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpErrorResponse }        from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
import { catchError, map } from 'rxjs/operators';

import { Observable }                                        from 'rxjs';

import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS, LOGIN_HOOK_NAME }    from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UsersService {

    protected basePath = 'http://localhost:8080/o/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new user
     * Creates a new User
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUser(body: User, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public createUser(body: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public createUser(body: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public createUser(body: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<User>>('post',`${this.basePath}/security/api/v1/users`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(
            map((response: HttpResponse<any>) => {
                if(response.status === 204) {
                    return undefined;
                } else {
                    return response.body.json();
                }
            }),
            catchError((error: any) => {
                if (error instanceof HttpErrorResponse) {
                    const loginHookName = LOGIN_HOOK_NAME + error.status;
                    if (typeof window[loginHookName] === "function") {
                        return (<any>window[loginHookName])(error);
                    }
                }
                return Observable.throw(error);
            })
        )
    }

    /**
     * Delete an existing user
     * Deletes a user 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUser(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public deleteUser(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public deleteUser(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public deleteUser(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<User>>('delete',`${this.basePath}/security/api/v1/users/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(
            map((response: HttpResponse<any>) => {
                if(response.status === 204) {
                    return undefined;
                } else {
                    return response.body.json();
                }
            }),
            catchError((error: any) => {
                if (error instanceof HttpErrorResponse) {
                    const loginHookName = LOGIN_HOOK_NAME + error.status;
                    if (typeof window[loginHookName] === "function") {
                        return (<any>window[loginHookName])(error);
                    }
                }
                return Observable.throw(error);
            })
        )
    }

    /**
     * Gets all users
     * Gets an unsorted list containing all users. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<User>>('get',`${this.basePath}/security/api/v1/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(
            map((response: HttpResponse<any>) => {
                if(response.status === 204) {
                    return undefined;
                } else {
                    return response.body.json();
                }
            }),
            catchError((error: any) => {
                if (error instanceof HttpErrorResponse) {
                    const loginHookName = LOGIN_HOOK_NAME + error.status;
                    if (typeof window[loginHookName] === "function") {
                        return (<any>window[loginHookName])(error);
                    }
                }
                return Observable.throw(error);
            })
        )
    }

    /**
     * Update an existing user
     * Updates a user 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUser(body: User, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public updateUser(body: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public updateUser(body: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public updateUser(body: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<User>>('put',`${this.basePath}/security/api/v1/users`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(
            map((response: HttpResponse<any>) => {
                if(response.status === 204) {
                    return undefined;
                } else {
                    return response.body.json();
                }
            }),
            catchError((error: any) => {
                if (error instanceof HttpErrorResponse) {
                    const loginHookName = LOGIN_HOOK_NAME + error.status;
                    if (typeof window[loginHookName] === "function") {
                        return (<any>window[loginHookName])(error);
                    }
                }
                return Observable.throw(error);
            })
        )
    }

}
