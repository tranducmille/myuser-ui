openapi: 3.0.0
info:
  title: Swagger Security UI
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: /o/rest/security/api/v1
    variables:
      basePath: /o/rest
tags:
  - name: Users
    description: Regular API calls
paths:
  /users:
      get:
        tags:
          - Users
        summary: Gets all users
        description: |
          Gets an unsorted list containing all users.
        operationId: getUsers
        responses:
          '200':
            description: return all users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '400':
            description: bad input parameter
            content: {}
      put:
        tags:
          - Users
        summary: Update an existing user
        description: |
          Updates a user
        operationId: updateUser
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          '200':
            description: return all users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '201':
            description: no content
            content: {}
          '400':
            description: invalid input
            content: {}
          '404':
            description: user not found
            content: {}
      post:
        tags:
          - Users
        summary: Create a new user
        description: Creates a new User
        operationId: createUser
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          '200':
            description: return all users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '201':
            description: item created
            content: {}
          '400':
            description: 'invalid input, object invalid'
            content: {}
          '409':
            description: this item exists
            content: {}
  /users/{id}:
    delete:
      tags:
        - Users
      summary: Delete an existing user
      operationId: deleteUser
      description: |
        Deletes a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '201':
          description: no content
        '400':
          description: invalid input
        '404':
          description: user not found
components:
  schemas:
    User:
      required:
        - accountName
        - active
        - address
        - city
        - country
        - fullName
        - id
        - zip
      type: object
      properties:
        id:
          type: integer
          format: int64
        accountName:
          type: string
        fullName:
          type: string
        address:
          type: string
        city:
          type: string
        zip:
          type: string
        country:
          type: string
        active:
          type: integer
          format: int64
